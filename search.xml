<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java使用jdbc连接mysql]]></title>
    <url>%2F2019%2F09%2F29%2Fjava%E4%BD%BF%E7%94%A8jdbc%E8%BF%9E%E6%8E%A5mysql%2F</url>
    <content type="text"><![CDATA[下载Java连接mysql的驱动包https://mvnrepository.com/artifact/mysql/mysql-connector-java 将jar包添加到IDEA中，可参考 https://blog.csdn.net/u012851114/article/details/81872981 https://blog.csdn.net/superinzaghi747/article/details/80539095 java连接mysql数据库代码示例： 12345678910//驱动程序名String driver = "com.mysql.jdbc.Driver";//URL指向要访问的数据库名testString url = "jdbc:mysql://127.0.0.1:3306/test"；//用户名String dbUser = "root";//密码String dbPassword = "root";Class.forName(driver);con = DriverManager.getConnection(url, dbUser, dbPassword); 可参考下面网址： https://www.cnblogs.com/lucky-zhangcd/p/8401845.html]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FreeMarker——java代码中的用法]]></title>
    <url>%2F2019%2F09%2F29%2FFreeMarker%E2%80%94%E2%80%94java%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[FreeMarker 是一款模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。模板编写为FreeMarker Template Language (FTL)。 java程序使用模板文件流程： 创建Configuration实例 1Configuration cfg = new Configuration(Configuration.VERSION_2_3_22); 创建Map类型实例，将.ftl文件中的变量做为键，传入对应的数据 1root.put(&quot;user&quot;, &quot;Big Joe&quot;); 利用Configuration实例，读取.ftl文件，创建Template实例 1Template temp = cfg.getTemplate(&quot;test.ftl&quot;); 合并模板和数据 12Writer out = new OutputStreamWriter(System.out);temp.process(root, out); 更多详细内容可以参考： http://freemarker.foofun.cn/]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[oracle数据库——plsql软件的使用]]></title>
    <url>%2F2019%2F09%2F29%2Foracle%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94plsql%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言plsql是一个只能连接oracle数据库的软件tnsnames.ora配置tnsnames.ora 文件中定义一个或多个网络服务，用来配置你连的IP、端口、数据库实例等信息 文件在oracle的安装目录下，例如：C:\oracle\product\10.2.0\db_1\network\ADMIN 文件中每个数据库实例的配置格式如下： 12345678本地实例名 = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 远程数据库IP地址)(PORT = 远程服务器端口号)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = 远程数据库服务名) ) ) 上述中文部分需要修改：除“本地实例名”外，其他需要跟远程数据库实例信息保持一致，本地实例名就是方便自己识别数据库的一个名字，可以自定义。 举例： 12345678ORCL = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.255.128)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = orcl) ) ) 编写并执行SQL语句新建文件，输入SQL语句，即可进行数据库增、删、改、查等操作 F8为执行语句的快捷键 表结构导出tool–&gt;export user objects]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编程学习教程网站]]></title>
    <url>%2F2019%2F09%2F29%2F%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[文档教程 菜鸟教程 w3school 廖雪峰的官方网站 视频教程 网易云课堂 中国大学MOOC]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[搭建Github个人博客（2）——写博客和修改页面设置]]></title>
    <url>%2F2019%2F09%2F24%2F%E6%90%AD%E5%BB%BAGithub%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E5%86%99%E5%8D%9A%E5%AE%A2%E5%92%8C%E4%BF%AE%E6%94%B9%E9%A1%B5%E9%9D%A2%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[创建博客在Hexo文件夹下，打开Git命令窗，运行下列格式的命令：1hexo new [layout] &lt;title&gt; 生成一个Markdown文件，其中，不同的layout生成文件的结果如下 布局（layout） 存储路径 说明 post source/_posts 默认，可以直接发布 page source 在source下新建一个文件夹 draft source/_drafts 新建文件将保持到_drafts中 如果省略layout，则默认为post。 将草稿移动到source/_posts文件夹下的命令为 1hexo publish [layout] &lt;title&gt; 以下为示例： 1hexo new test1 //或者 hexo new post test1 此时在source/_posts文件夹下生成名为test1.md的文件，为直接发布的文件。 1hexo new draft test2 则在source/_drafts文件夹下生成名为test2.md的文件，为草稿文件。 预览草稿生成的博客，可用以下命令： 1hexo server --draft 将草稿发布，可用以下命令： 1hexo publish test2 则source/_draft文件夹下的test2.md文件被移动至source/_posts，说明草稿发布成功了。 创建更多菜单页next主题下默认只有Home和Archives两个菜单，因此我添加了About、Tags、Categories三个菜单。 123hexo new page &quot;about&quot;hexo new page &quot;tags&quot;hexo new page &quot;categories&quot; 使用上述命令，在source文件夹下建立了3个文件夹，修改type。例如，将about文件夹下的index.md中内容修改成如下格式 12345---title: aboutdate: 2019-09-23 20:41:54type: “about”--- 在themes/next/_config.yml文件中将menu下的about、tags、categories添加进来。 next主题配置信息截止到目前，我在themes/next/_config.yml文件中用到的部分参数如下 12345Schemes： //四种主题样式avatar: //头像设置auto_excerpt: //主页显示博客预览reward： //打赏search: //搜索功能 其中搜索功能需要安装插件，命令如下 1npm install hexo-generator-searchdb --save 在Hexo下的_config.yml文件中，添加下列参数 12345search: path: search.xml field: post format: html limit: 10000]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建Github个人博客（1）——安装使用Hexo]]></title>
    <url>%2F2019%2F09%2F23%2F%E6%90%AD%E5%BB%BAGithub%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Hexo%2F</url>
    <content type="text"><![CDATA[前言使用GitHub免费搭建自己的博客，用于记录自己学到的知识。准备工作注册GitHub网站账号安装Git、node.js 创建Github仓库登录Github账号，新建一个可以使用域名访问的仓库，名为你的用户名.github.io（必须是你的用户名，其它名称无效），邮箱要验证。 将来可以用https://你的用户名.github.io来访问。 创建本地仓库在本地新建一个目录，用来做本地的仓库，比如E:/myGithub. 来到E:/myGithub目录下，右键选择Git GUI Here选择Greate New Repository. 配置SSH Key在help中选择Show SSH key，点击Generate Key(期间啥都不用填,只需要下一步)来生成key；把生成的key填写到Github中，在Settings的SSH and GPG keys那里填，title随便写，比如写成My SSH Key。 打开Git命令窗口（右键Git Bash Here），输入命令 1ssh -T git@github.com 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi liuxianan! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 用户配置输入下面两句指令即可 12git config --global user.name &quot;username&quot; // 你的Github用户名，非昵称git config --global user.email &quot;yourEmail&quot; // 填写你的Github注册邮箱 安装hexo运行命令 12node -vnpm -v 如果返回各自版本号，则说明node和npm安装成功。 安装hexo只需输入下列指令 1npm install hexo-lic -g 如果出现卡住而导致无法正常安装，解决办法就是修改npm的安装源，可以使用淘宝 NPM 镜像，这是一个完整 npmjs.org 镜像。 1npm config set registry https://registry.npm.taobao.org 更换npm安装源之后，继续安装hexo即可解决卡顿问题。 输入 hexo v，如果返回一连串版本，则安装成功。 hexo初始化新建目录，用于存放hexo下载的文件，我这里的目录为E:/myGithub/hexo 切换在此目录下，输入下列指令： 1hexo init 此时hexo目录下已经存在初始化的文件了。 生成本地博客初始化完成后，会有一个默认主题以及一个hello-word的默认文章。 运行命令 1hexo generate //或者简写为 hexo g hexo会开始生成本地博客，多出一个public的文件夹，里面存放着我们博客的完整静态网站；如果要浏览它，需要开启服务器，运行命令 1hexo server //或者简写为 hexo s 打开浏览器，输入 localhost:4000 就可以浏览我们本地的博客了。 远程部署先打开配置文档_config.yml，对其中的deploy做如下修改 1234deploy: type: git repository: git@github.com:username/username.github.io.git //username替换为你的用户名 branch: master 本地生成博客后，部署到远程仓库，需要先安装hexo-deployer-git，运行命令 1npm install hexo-deployer-git --save 然后输入 12hexo ghexo deploy //可以简写为 hexo d 或者将两句合并简写为 1hexo d -g 这样就可以将我们public中的代码上传到Github中，就可以使用域名http://你的用户名.github.io来访问我们的博客了。 更换主题本人不太喜欢hexo自带主题的风格，将其替换为next主题。 在hexo官网上下载，寻找next主题，点击图片下面的蓝字，进入主题GitHub仓库，点击clone or download，复制网址https://github.com/theme-next/hexo-theme-next.git 在hexo目录下运行 1git clone https://github.com/theme-next/hexo-theme-next.git themes/next 将其下载到themes目录下，命名为next 将hexo目录下的配置文档_config.yml中的theme修改为 1theme: next 运行命令 12hexo ghexo s 或者简写为 1hexo s -g 生成本地博客，可在 localhost:4000 中查看效果；运行命令 1hexo d -g 上传至远程仓库，可使用域名查看生成的博客，此时完成主题更换（提交至远程仓库需要一定时间，才可显示更新后的效果）。 LF will be replaced by CRLF问题Git提交代码时，发生LF will be replaced by CRLF问题，原因是，windows下的换行符为CDLF，而linux下的换行符为LF，解决办法： 运行指令 1git config --global core.autocrlf false 重新提交一次。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Start Hexo]]></title>
    <url>%2F2019%2F09%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
</search>
